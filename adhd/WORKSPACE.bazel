# Copyright 2021 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# For building from ebuild, we need to download files from following http_archive urls,
# upload those to chromeos-mirror by steps in
# https://chromium.googlesource.com/chromiumos/docs/+/HEAD/archive_mirrors.md#updating-localmirror-localmirror_private
# and add
# "<url in http_archive> -> <archived file name in chromeos-mirror>"
# into `bazel_external_uris` in cras-bench-9999.ebuild to make it works.

http_archive(
    name = "bazel_skylib",
    sha256 = "b8a1527901774180afc798aeb28c4634bdccf19c4d98e7bdd1ce79d1fe9aaad7",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.4.1/bazel-skylib-1.4.1.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

http_archive(
    name = "com_github_google_benchmark",
    sha256 = "6430e4092653380d9dc4ccb45a1e2dc9259d581f4866dc0759713126056bc1d7",
    strip_prefix = "benchmark-1.7.1",
    urls = [
        "https://github.com/google/benchmark/archive/refs/tags/v1.7.1.tar.gz",
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/google-benchmark-v1.7.1.tar.gz",
    ],
)

http_archive(
    name = "rules_cc",
    sha256 = "3d9e271e2876ba42e114c9b9bc51454e379cbf0ec9ef9d40e2ae4cec61a31b40",
    strip_prefix = "rules_cc-0.0.6",
    urls = [
        "https://github.com/bazelbuild/rules_cc/releases/download/0.0.6/rules_cc-0.0.6.tar.gz",
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/bazelbuild-rules_cc-0.0.6.tar.gz",
    ],
)

load(
    ":pkg_config.bzl",
    "pkg_config_repository",
)

http_archive(
    name = "iniparser",
    build_file = "//:BUILD.iniparser",
    sha256 = "aedf23881b834519aea5e861b2400606d211da049cd59d3cfb4568e0d9eff5c5",
    strip_prefix = "iniparser/src",
    urls = [
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/iniparser-3.1.tar.gz",
        "http://ndevilla.free.fr/iniparser/iniparser-3.1.tar.gz",
    ],
)

pkg_config_repository(
    name = "pkg_config",
    libs = [
        "gtest",
        "gtest_main",
        "alsa",
        "speexdsp",
        "dbus-1",
        "libudev",
        "sbc",
        # optional deps
        "libmetrics",
        "libselinux",
        "libfeatures_c",
        "libwebrtc_apm",
        "tensorflowlite",
        "libchrome",
        "libcros_config",
    ],
)

load(":fuzz_engine.bzl", "fuzz_engine_repository")

fuzz_engine_repository(name = "fuzz_engine")

#
# Rust dependencies
#

RULES_RUST_VERSION = "0.17.0"

http_archive(
    name = "rules_rust",
    sha256 = "d125fb75432dc3b20e9b5a19347b45ec607fabe75f98c6c4ba9badaab9c193ce",
    urls = [
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/rules_rust-v{0}.tar.gz".format(RULES_RUST_VERSION),
        "https://github.com/bazelbuild/rules_rust/releases/download/{0}/rules_rust-v{0}.tar.gz".format(RULES_RUST_VERSION),
    ],
)

http_archive(
    name = "rust_cc_common_link",
    sha256 = "d125fb75432dc3b20e9b5a19347b45ec607fabe75f98c6c4ba9badaab9c193ce",
    strip_prefix = "test/cc_common_link",
    urls = [
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/rules_rust-v{0}.tar.gz".format(RULES_RUST_VERSION),
        "https://github.com/bazelbuild/rules_rust/releases/download/{0}/rules_rust-v{0}.tar.gz".format(RULES_RUST_VERSION),
    ],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains(
    allocator_library = "@rust_cc_common_link//:allocator_library",
    edition = "2018",
)

load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies()

load("@rules_rust//crate_universe:defs.bzl", "crates_repository")

crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.lock",
    lockfile = "//:Cargo.Bazel.lock",
    manifests = [
        "//:Cargo.toml",
        "//cras/src/audio_processor:Cargo.toml",
        "//cras/src/server/rust:Cargo.toml",
        "//cras/src/server/rust:binding_generator/Cargo.toml",
        "//cras/src/server/rust:cras_dlc/Cargo.toml",
    ],
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()

# Compilation database
HEDRON_COMPILE_COMMANDS_REF = "0197fc673a1a6035078ac7790318659d7442e27e"

http_archive(
    name = "hedron_compile_commands",
    sha256 = "632cf245a06f38a02eefe9764ae5ca581b74bfa106a44067665fcd99fb6babb0",
    strip_prefix = "bazel-compile-commands-extractor-{}".format(HEDRON_COMPILE_COMMANDS_REF),
    urls = [
        "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/{}.tar.gz".format(HEDRON_COMPILE_COMMANDS_REF),
        "https://storage.googleapis.com/chromeos-localmirror/distfiles/hedron_compile_commands-{}.tar.gz".format(HEDRON_COMPILE_COMMANDS_REF),
    ],
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()

load("//repositories/http_archive_deps:repo.bzl", "http_archive_deps_setup")

http_archive_deps_setup()
